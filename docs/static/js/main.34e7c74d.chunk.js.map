{"version":3,"sources":["App.utils.tsx","konva/KonvaNote.tsx","konva/Konva.tsx","pixi/PixiNote.tsx","App.types.tsx","pixi/Pixi.tsx","dom/DomNote.tsx","dom/Dom.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SIZE","getNoteShape","size","KonvaNote","x","y","color","content","draggable","points","fill","closed","width","height","text","padding","fontSize","KonvaComp","artifacts","map","a","i","PIXI","from","fontFamily","strokeThickness","RenderVersion","PixiNote","ref","useRef","useState","isDragging","setIsDragging","data","setData","localX","setLocalX","localY","setLocalY","draw","useCallback","g","parsedColor","parseInt","replace","clear","beginFill","drawPolygon","endFill","onDragStart","event","onDragMove","newPosition","getLocalPosition","current","parent","onDragEnd","undefined","anchor","position","pointerdown","pointermove","pointerup","pointerupoutside","interactive","alpha","style","fontName","maxWidth","PixiComp","options","backgroundColor","resolution","artifact","index","DomNote","bounds","defaultPosition","nodeRef","background","DomComp","overflow","App","selectedVersion","setSelectedVersion","noOfArtifacts","setNoOfArtifacts","useMemo","Array","Math","random","className","left","right","Object","values","version","classNames","selected","onClick","value","KONVA","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAEaA,EACJ,KADIA,EAEH,KAGGC,EAAe,SAACC,GAAD,MAAkB,CAC5C,EACA,EACA,EACAA,EACAA,EACAA,EACAA,EACAA,EAAO,GACPA,EAAOA,EAAO,GACd,I,OCbWC,EAAgC,SAAC,GAMvC,IALLC,EAKI,EALJA,EACAC,EAII,EAJJA,EACAH,EAGI,EAHJA,KACAI,EAEI,EAFJA,MACAC,EACI,EADJA,QAEA,OACE,eAAC,IAAD,CAAOH,EAAGA,EAAGC,EAAGA,EAAGG,WAAS,EAA5B,UACE,cAAC,IAAD,CAAMC,OAAQR,EAAaC,GAAOQ,KAAMJ,EAAOK,QAAM,IACrD,cAAC,IAAD,CACEC,MAAOV,EACPW,OAAQX,EACRY,KAAMP,EACNG,KAAK,QACLK,QAAS,GACTC,SAAU,SCfLC,EAAY,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,UAC1B,OACE,cAAC,IAAD,CAAON,MAAOZ,EAAYa,OAAQb,EAAlC,SACE,cAAC,IAAD,UACGkB,EAAUC,KAAI,SAACC,EAAGC,GAAJ,OACb,cAAC,EAAD,eAAuBD,GAAPC,W,qBCH1BC,EAAgBC,KAAK,YAAa,CAChCC,WAAY,QACZR,SAAU,GACVS,gBAAiB,EACjBf,KAAM,UAGD,ICJKgB,EDICC,EAA+B,SAAC,GAMtC,IALLvB,EAKI,EALJA,EACAC,EAII,EAJJA,EACAH,EAGI,EAHJA,KACAI,EAEI,EAFJA,MACAC,EACI,EADJA,QAEMqB,EAAMC,iBAAY,MACxB,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,mBAAS1B,GAArC,mBAAO+B,EAAP,KAAeC,EAAf,KACA,EAA4BN,mBAASzB,GAArC,mBAAOgC,EAAP,KAAeC,EAAf,KAEMC,EAAOC,uBACX,SAACC,GACC,IAAMC,EAAcC,SAASrC,EAAMsC,QAAQ,KAAM,IAAK,IACtDH,EAAEI,QACFJ,EAAEK,UAAUJ,GACZD,EAAEM,YAAF,MAAAN,EAAC,YAAgBxC,EAAaC,KAC9BuC,EAAEO,YAEJ,CAAC9C,EAAMI,IAGH2C,EAAcT,uBAAY,SAACU,GAC/BhB,EAAQgB,EAAMjB,MACdD,GAAc,KACb,IAEGmB,EAAaX,uBAAY,WAC7B,GAAIT,EAAY,CAAC,IAAD,IACRqB,EAAW,OAAGnB,QAAH,IAAGA,GAAH,UAAGA,EAAMoB,wBAAT,aAAG,OAAApB,EAAI,OAAqBL,QAArB,IAAqBA,GAArB,UAAqBA,EAAK0B,eAA1B,aAAqB,EAAcC,QAC3D,IAAKH,EAAa,OAClBhB,EAAUgB,EAAYhD,EAAIF,EAAO,GACjCoC,EAAUc,EAAY/C,EAAIH,EAAO,MAElC,CAAC+B,EAAMF,EAAY7B,IAEhBsD,EAAYhB,uBAAY,WAC5BN,OAAQuB,GACRzB,GAAc,KACb,IAEH,OACE,eAAC,YAAD,CACEJ,IAAKA,EACL8B,OAAQ,GACRC,SAAU,CAACxB,EAAQE,GACnBuB,YAAaX,EACbY,YAAaV,EACbW,UAAWN,EACXO,iBAAkBP,EAClBQ,aAAW,EARb,UAUE,cAAC,WAAD,CAAU5D,EAAG,EAAGC,EAAG,EAAGkC,KAAMA,EAAM0B,MAAOlC,EAAa,GAAM,IAC5D,cAAC,aAAD,CACE3B,EAAG,EACHC,EAAG,EACHS,KAAMP,EACN2D,MAAO,CAAEC,SAAU,YAAanD,SAAU,GAAIoD,SAAUlE,SEpEnDmE,EAAW,SAAC,GAA8B,IAA5BnD,EAA2B,EAA3BA,UACzB,OACE,cAAC,QAAD,CACEN,MAAOZ,EACPa,OAAQb,EACRsE,QAAS,CAAEC,gBAAiB,SAAUC,WAAY,GAHpD,SAKGtD,EAAUC,KAAI,SAACsD,EAAUC,GAAX,OACb,cAAC,EAAD,eAA0BD,GAAXC,S,iBCTVC,EAA8B,SAAC,GAAoC,IAAlCvE,EAAiC,EAAjCA,EAAGC,EAA8B,EAA9BA,EAAGH,EAA2B,EAA3BA,KAAMI,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACzDqB,EAAMC,iBAAO,MACnB,OACE,cAAC,IAAD,CAAW+C,OAAO,SAASC,gBAAiB,CAAEzE,IAAGC,KAAKyE,QAASlD,EAA/D,SACE,qBACEA,IAAKA,EACLsC,MAAO,CACLtD,MAAOV,EACPW,OAAQX,EACR6E,WAAYzE,EACZqD,SAAU,YANd,SASGpD,OCbIyE,EAAU,SAAC,GAA8B,IAA5B9D,EAA2B,EAA3BA,UACxB,OACE,qBACEgD,MAAO,CACLtD,MAAOZ,EACPa,OAAQb,EACR2D,SAAU,WACVsB,SAAU,UALd,SAQG/D,EAAUC,KAAI,SAACC,EAAGC,GAAJ,OACb,cAAC,EAAD,eAAqBD,GAAPC,U,SHLVK,K,YAAAA,E,cAAAA,E,WAAAA,M,KIuCGwD,MAxCf,WACE,MAA8CpD,mBAASJ,EAAcJ,MAArE,mBAAO6D,EAAP,KAAwBC,EAAxB,KACA,EAA0CtD,mBAAS,KAAnD,mBAAOuD,EAAP,KAAsBC,EAAtB,KAEMpE,EAAYqE,mBAAQ,kBRQ1BC,MQR6CH,GRS1C3E,KAAK,CACJN,EAAG,EACHC,EAAG,EACHH,KAAM,IACNI,MAAO,UACPC,QAAS,iBAEVY,KAAI,SAACC,GAAD,mBAAC,eACDA,GADA,IAEHhB,EAAGqF,KAAKC,SAAW1F,EACnBK,EAAGoF,KAAKC,SAAW1F,SQnBsC,CAACqF,IAE9D,OACE,sBAAKM,UAAU,MAAf,UACE,cAAC,IAAD,CAAUC,KAAK,OAAOC,MAAM,MAC5B,sBAAKF,UAAU,UAAf,UACGG,OAAOC,OAAOrE,GAAeP,KAAI,SAAC6E,GAAD,OAChC,wBAEEL,UAAWM,IAAW,CAAEC,SAAUf,IAAoBa,IACtDG,QAAS,kBAAMf,EAAmBY,IAHpC,SAKGA,GAJIA,MAORF,OAAOC,OAAO,CAAC,EAAG,IAAK,IAAK,IAAM,MAAO5E,KAAI,SAACiF,GAAD,OAC5C,wBAEET,UAAWM,IAAW,CAAEC,SAAUE,IAAUf,IAC5Cc,QAAS,kBAAMb,EAAiBc,IAHlC,SAKGA,GAJIA,SAQVjB,IAAoBzD,EAAcJ,KACjC,cAAC,EAAD,CAAUJ,UAAWA,IACnBiE,IAAoBzD,EAAc2E,MACpC,cAAC,EAAD,CAAWnF,UAAWA,IAEtB,cAAC,EAAD,CAASA,UAAWA,QC7BboF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.34e7c74d.chunk.js","sourcesContent":["import { NoteType } from \"./App.types\";\n\nexport const SIZE = {\n  width: 3840,\n  height: 2160,\n};\n\nexport const getNoteShape = (size: number) => [\n  0,\n  0,\n  0,\n  size,\n  size,\n  size,\n  size,\n  size / 10,\n  size - size / 10,\n  0,\n];\n\nexport const getArtifacts = (count: number): NoteType[] =>\n  Array(count)\n    .fill({\n      x: 0,\n      y: 0,\n      size: 100,\n      color: \"#90EE90\",\n      content: \"some content\",\n    })\n    .map((a) => ({\n      ...a,\n      x: Math.random() * SIZE.width,\n      y: Math.random() * SIZE.height,\n    }));\n","import { Text, Group, Line } from \"react-konva\";\nimport { NoteType } from \"../App.types\";\nimport { getNoteShape } from \"../App.utils\";\n\nexport const KonvaNote: React.FC<NoteType> = ({\n  x,\n  y,\n  size,\n  color,\n  content,\n}) => {\n  return (\n    <Group x={x} y={y} draggable>\n      <Line points={getNoteShape(size)} fill={color} closed />\n      <Text\n        width={size}\n        height={size}\n        text={content}\n        fill=\"black\"\n        padding={10}\n        fontSize={20}\n      />\n    </Group>\n  );\n};\n","import { Layer, Stage } from \"react-konva\";\nimport { CompProps } from \"../App.types\";\nimport { SIZE } from \"../App.utils\";\nimport { KonvaNote } from \"./KonvaNote\";\n\nexport const KonvaComp = ({ artifacts }: CompProps) => {\n  return (\n    <Stage width={SIZE.width} height={SIZE.height}>\n      <Layer>\n        {artifacts.map((a, i) => (\n          <KonvaNote key={i} {...a} />\n        ))}\n      </Layer>\n    </Stage>\n  );\n};\n","import { BitmapText, Container, Graphics } from \"@inlet/react-pixi\";\nimport { InteractionData, InteractionEvent } from \"@pixi/interaction\";\nimport * as PIXI from \"pixi.js\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { NoteType } from \"../App.types\";\nimport { getNoteShape } from \"../App.utils\";\n\nPIXI.BitmapFont.from(\"TitleFont\", {\n  fontFamily: \"Arial\",\n  fontSize: 20,\n  strokeThickness: 1,\n  fill: \"black\",\n});\n\nexport const PixiNote: React.FC<NoteType> = ({\n  x,\n  y,\n  size,\n  color,\n  content,\n}) => {\n  const ref = useRef<any>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [data, setData] = useState<InteractionData | undefined>();\n  const [localX, setLocalX] = useState(x);\n  const [localY, setLocalY] = useState(y);\n\n  const draw = useCallback(\n    (g: PIXI.Graphics) => {\n      const parsedColor = parseInt(color.replace(/^#/, \"\"), 16);\n      g.clear();\n      g.beginFill(parsedColor);\n      g.drawPolygon(...getNoteShape(size));\n      g.endFill();\n    },\n    [size, color]\n  );\n\n  const onDragStart = useCallback((event: InteractionEvent) => {\n    setData(event.data);\n    setIsDragging(true);\n  }, []);\n\n  const onDragMove = useCallback(() => {\n    if (isDragging) {\n      const newPosition = data?.getLocalPosition?.(ref?.current?.parent);\n      if (!newPosition) return;\n      setLocalX(newPosition.x - size / 2);\n      setLocalY(newPosition.y - size / 2);\n    }\n  }, [data, isDragging, size]);\n\n  const onDragEnd = useCallback(() => {\n    setData(undefined);\n    setIsDragging(false);\n  }, []);\n\n  return (\n    <Container\n      ref={ref}\n      anchor={0.5}\n      position={[localX, localY]}\n      pointerdown={onDragStart}\n      pointermove={onDragMove}\n      pointerup={onDragEnd}\n      pointerupoutside={onDragEnd}\n      interactive\n    >\n      <Graphics x={0} y={0} draw={draw} alpha={isDragging ? 0.5 : 1} />\n      <BitmapText\n        x={0}\n        y={0}\n        text={content}\n        style={{ fontName: \"TitleFont\", fontSize: 20, maxWidth: size }}\n      />\n    </Container>\n  );\n};\n","export type NoteType = {\n  x: number;\n  y: number;\n  size: number;\n  content: string;\n  color: string;\n};\n\nexport type CompProps = { artifacts: NoteType[] };\n\nexport enum RenderVersion {\n  PIXI = \"pixi\",\n  KONVA = \"konva\",\n  DOM = \"dom\",\n}\n","import { Stage } from \"@inlet/react-pixi\";\nimport { PixiNote } from \"./PixiNote\";\nimport { CompProps } from \"../App.types\";\nimport { SIZE } from \"../App.utils\";\n\nexport const PixiComp = ({ artifacts }: CompProps) => {\n  return (\n    <Stage\n      width={SIZE.width}\n      height={SIZE.height}\n      options={{ backgroundColor: 0xfafafa, resolution: 1 }}\n    >\n      {artifacts.map((artifact, index) => (\n        <PixiNote key={index} {...artifact} />\n      ))}\n    </Stage>\n  );\n};\n","import { useRef } from \"react\";\nimport Draggable from \"react-draggable\";\nimport { NoteType } from \"../App.types\";\n\nexport const DomNote: React.FC<NoteType> = ({ x, y, size, color, content }) => {\n  const ref = useRef(null);\n  return (\n    <Draggable bounds=\"parent\" defaultPosition={{ x, y }} nodeRef={ref}>\n      <div\n        ref={ref}\n        style={{\n          width: size,\n          height: size,\n          background: color,\n          position: \"absolute\",\n        }}\n      >\n        {content}\n      </div>\n    </Draggable>\n  );\n};\n","import { CompProps } from \"../App.types\";\nimport { SIZE } from \"../App.utils\";\nimport { DomNote } from \"./DomNote\";\n\nexport const DomComp = ({ artifacts }: CompProps) => {\n  return (\n    <div\n      style={{\n        width: SIZE.width,\n        height: SIZE.height,\n        position: \"relative\",\n        overflow: \"hidden\",\n      }}\n    >\n      {artifacts.map((a, i) => (\n        <DomNote key={i} {...a} />\n      ))}\n    </div>\n  );\n};\n","import { useMemo, useState } from \"react\";\nimport FPSStats from \"react-fps-stats\";\nimport classNames from \"classnames\";\nimport { KonvaComp } from \"./konva/Konva\";\nimport { PixiComp } from \"./pixi/Pixi\";\nimport { DomComp } from \"./dom/Dom\";\nimport { RenderVersion } from \"./App.types\";\nimport { getArtifacts } from \"./App.utils\";\n\nfunction App() {\n  const [selectedVersion, setSelectedVersion] = useState(RenderVersion.PIXI);\n  const [noOfArtifacts, setNoOfArtifacts] = useState(100);\n\n  const artifacts = useMemo(() => getArtifacts(noOfArtifacts), [noOfArtifacts]);\n\n  return (\n    <div className=\"App\">\n      <FPSStats left=\"auto\" right=\"0\" />\n      <div className=\"buttons\">\n        {Object.values(RenderVersion).map((version) => (\n          <button\n            key={version}\n            className={classNames({ selected: selectedVersion === version })}\n            onClick={() => setSelectedVersion(version)}\n          >\n            {version}\n          </button>\n        ))}\n        {Object.values([5, 100, 500, 1000, 5000]).map((value) => (\n          <button\n            key={value}\n            className={classNames({ selected: value === noOfArtifacts })}\n            onClick={() => setNoOfArtifacts(value)}\n          >\n            {value}\n          </button>\n        ))}\n      </div>\n      {selectedVersion === RenderVersion.PIXI ? (\n        <PixiComp artifacts={artifacts} />\n      ) : selectedVersion === RenderVersion.KONVA ? (\n        <KonvaComp artifacts={artifacts} />\n      ) : (\n        <DomComp artifacts={artifacts} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}